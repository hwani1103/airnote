에어노트에 적용순위

1. 노트리스트 전체 가져오는거 static props로 해보기
2. 노트 새로 작성할때마다 ODM으로 전체리스트 rebuild하는거 해보기.
3. 노트 디테일에 getstaticprops랑 paths써서 최초에 요청하면 빌드하고, 그 뒤부터는 html을 보여주기
4. 노트 디테일에 속한 다른것들도 staticprops적용
5. 프로필도 전부 적용
6. 노트랑 프로필 및 그외 필요한 부분들 페이지네이션까지 props로 적용
7. p e r f e c t ! 



// statictest.tsx는, 모든 note를 조회하는 prisma 쿼리가 있는 클라이언트 페이지임.
  // 그 쿼리는 getStaticProps에 들어있고
  // 다른 페이지에서 이 API를 호출하면, 응답을 하기전에 revalidate를 해주면, 그 페이지의 데이터가 최신화
  // 이걸 자기 페이지에서 쓰려면. 강제로 리다이렉트를 한번 해줘야
  // 왜냐면, revalidate가 일어나도 실제 다시 빌드하고 가져오는 시간이 최소 얼마는 걸릴테니 그동안은 접속해도 예전데이터임
  // 그래서 글을 쓰면, 그 디테일 페이지를 먼저 보여주면서 리스트 페이지를 revalidate시켜버리면 , 디테일에서 리스트로 갈쯤에는 최신화가 되어있음
  // 아주 좋은기능



  // fallback blocking은 최초 페이지가 만들어질 때 user는 아무것도 볼 수 없음.
    // 그 이후에는 바로바로 렌더링되긴함.
    // false는 안쓰면되고
    // true는. 동작은 blocking이랑 동일한데
    // 최초에 로딩되는동안 무언가가 보여지고 로딩이 되면 자동으로
    // 생성된 페이지가 보여짐.
    // 사용방법은 if(router.isFallback){return <div>Loading</div>}
    // 근데, 이 방법이 더 좋을지 blocking이 더 좋을지는 모르겠다.
    // 애초에 로딩이 최초1번인데.. 굳이 그럴필요가 있나 싶기도하고 모르겠다

    일단
    getStaticProps는 무조건 모든페이지에 다 적용해야되고. notelist랑 note detail이랑 reply detail은 그냥 다 하면 되고
    근데 이제 내 게시글인지에 따라 달라지는 부분들은, 어쩔수없이 SWR을 써야될것같기도 함
    그리고 바로바로 변경을 보여주어야하는 UI들에서도 여전히 SWR을 써야될것같기도하고
    그런건고려해보고 아무튼 그렇더라도 엄청 엄청 좋다.

    statictest로 시작하는 파일들에서 다 정리됐으니까 내일 적용해보면될듯 notelist부터.

    getStaticProps랑 On demand revalidate로 게시글 작성 및 조회 써먹고

    getStaticProps, getStaticPaths에서 fallback:"blocking"으로
    디테일 페이지 조회하는거 활용하면 될듯
    좋다좋다 적용해보자
    내일 이것만 모든페이지에 다 적용해도 성공일듯.